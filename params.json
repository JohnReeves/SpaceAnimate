{"name":"Spaceanimate","tagline":"Move your planets with JavaScript.","body":"#Space Worksheet 2\r\n\r\n![alt text](http://i.imgur.com/GwVqsqt.png \"final image\")\r\n\r\n##Task 1 - Setup\r\n\r\n- Either find your JSFiddle from last week (you need at least 1 planet to start this worksheet)\r\n- Or use [my JSFiddle](http://jsfiddle.net/Y662q/) (please open in a new tab in Google Chrome)\r\n\r\nEnable jQuery\r\n  - Top right - (Frameworks & Extensions)\r\n  - (might need to scroll a lot!)\r\n\r\n![alt text](http://imgur.com/lFkeo3h.png \"turn on jQuery\")\r\n\r\n##Task 2 - give all your planet shapes id's\r\n\r\nWe need to give all our planet shapes an id attribute so we can access them using JavaScript\r\n\r\ne.g. my earth shape looks like \r\n```xml\r\n<circle id=\"earth\" cx=\"250\" cy=\"100\" r=\"10\" fill=\"green\" />\r\n```\r\n\r\n##Task 3 - let's start with the console\r\n\r\n- in the little window below your HTML (should say JavaScript)\r\n```javascript\r\nconsole.log(\"hello world\");\r\n```\r\n\r\n- right click anywhere on your page - click Inspect Element\r\n- View the last tab \"Console\"\r\n- Click JSFiddle's Run button\r\n\r\n![alt text](http://imgur.com/nK8Nd7Q.png \"chrome's console\")\r\n\r\n\r\n##Task 4 - Functions\r\n\r\nIn programming, we make things called functions which are just ways of grouping things together - for example you might have a function called `doHomework()` which would have things like `findBook` and `writeAnswers` in it.\r\n\r\nWe're going to make a function say hello! to us!\r\n\r\n```javascript\r\nfunction movePlanets(){\r\n    \r\n    console.log(\"hello!\");\r\n\r\n}\r\n\r\n```\r\n\r\nBut wait! If we press run now, nothing happens? This is because we've not actually told the computer to run this function. We need to add the line `movePlanets();` below the squigley bracket. Now have a go at running it again!\r\n\r\nTry copying that one line of code and pasting it several times, what happens?\r\n\r\n##Task 5 - Loops\r\n\r\n##Timed wait\r\n\r\nThere are two types of timed behaviour commonly used in animation, one is *wait* and the other is *repeat*.\r\n\r\nThe JavaScript function ```setTimeOut()```, allows you to wait before a change happens or allows you to say how long you want a change to happen for.\r\n\r\nJavaScript handles time in milliseconds. So this will call ```destroyPlanets()``` after waiting for 5 second.\r\n\r\n```javascript\r\nsetTimeout(destroyPlanets, 5000);\r\n```\r\n\r\n##Repetition\r\nThe other timed behaviour, which we will use to move the planets, is *repetition*.\r\n\r\nIn JavaScript the ```setInterval()``` function, allows you to say how often you want a change to happen.\r\n\r\nAgain, time is in milliseconds. So this will call ```movePlanets()``` once every second.\r\n\r\n```javascript\r\nsetInterval(movePlanets, 1000);\r\n```\r\n\r\nClick run - now our program says Hello quite a lot.\r\n\r\n\r\n##Task 6 - Variables\r\n\r\nHaving all our notifications stack on top of each other isn't particularly lucky. In programming we have useful things called \"variables\" which are like little containers that you can put information into. We want to count how many seconds we've been running.\r\n\r\nAt the top of your project, above your function write:\r\n```javascript\r\nvar counter = 0;\r\n```\r\n\r\nThis gives us a variable called \"counter\" which starts off at zero.\r\n\r\nInside our movePlanet function, before console.log , we want to add 1 to it. We can do that by getting what's currently in the pot and adding one to it.\r\n\r\n```javascript\r\ncounter = counter +1;\r\n```\r\n\r\nNow we can change our message to say:\r\n\r\n```javascript\r\nconsole.log(\"moving earth \" + counter);\r\n```\r\nClick run - now our program says Hello and sticks the number of times it's said so beside it.\r\n\r\n##Task 7 - Waves\r\n\r\nLast few steps to actually move earth.\r\n\r\nFirst off, we need to make a function to calculate the x and y values for an orbit. Forunately, someone else already wrote that bit for us, so add these below your movePlanet function's end squigley bracket `}`:\r\n\r\n```javascript\r\nfunction calculateXPosition(degrees, sunX, orbitRadius) {\r\n    var velocity = degrees * (Math.PI /180);\r\n    return sunX + (orbitRadius * Math.cos(velocity));\r\n}\r\n\r\nfunction calculateYPosition(degrees, sunY, orbitRadius) {\r\n    var velocity = degrees * (Math.PI /180);\r\n    return sunY + (orbitRadius * Math.sin(velocity));\r\n}\r\n```\r\n\r\n**Try to understand what the parameters mean, as you will use these functions in your code.**\r\n\r\nInside our movePlanet() function after you've added 1 to the counter, save earth's X and Y to a variable:\r\n```javascript\r\nvar earthX = calculateXPosition(counter, 250, 150);\r\nvar earthY = calculateYPosition(counter, 250, 150);\r\nconsole.log(\"earth x=\" + earthX + \" y = \" + earthY);\r\n```\r\n\r\n**You will need to change the parameters passed to the X & Y positions, to match the values you have used for your orbits.**\r\n\r\nFinally, we need to tell our earth shape to move!\r\n```javascript\r\n$(\"#earth\").attr(\"cx\", earthX);\r\n$(\"#earth\").attr(\"cy\", earthY);\r\n```\r\nClick run - this should move our earth a little bit each second. Try playing around with the setInterval time, what happens when we change it to 500?\r\n\r\n##Task 8 - The Solar System\r\n\r\nWe have looked at Earth (also known as Sol 3). See if you can make a realistic solar system:\r\n\r\n1. Put in the animation for all the planets\r\n2. Use different speeds for the size of orbit\r\n3. Add some moons to the planets\r\n\r\n##Task 9 - Finishing\r\n\r\nWhen you've finished totally - don't forget to save your JSFiddle and send us your link above.\r\n\r\n\r\n##Task 10 - Code for Improving\r\n\r\n![Imgur](http://i.imgur.com/6ebTEl0.png)\r\n\r\n```javascript\r\nvar counter = 0;\r\n\r\nfunction movePlanets(){\r\n    \r\n    //increment the counter\r\n    counter = counter +1;\r\n    \r\n    //find x and y values for earth\r\n    var earthX = calculateXPosition(counter, 250, 150);\r\n    var earthY = calculateYPosition(counter, 250, 150);\r\n\r\n    //write out the current x and y values\r\n    console.log(\"earth x=\" + earthX + \" y = \" + earthY);\r\n    \r\n    //update our earth shape.\r\n    $(\"#earth\").attr(\"cx\", earthX);\r\n    $(\"#earth\").attr(\"cy\", earthY);\r\n        \r\n}\r\n\r\n/*\r\ncalculate the X value\r\n    degrees = number around the circle\r\n    sunX = the sun's current X value\r\n    orbitRadius = the radius the planet will travel around\r\n*/\r\nfunction calculateXPosition(degrees, sunX, orbitRadius) {\r\n    var velocity = degrees * (Math.PI /180);\r\n    return sunX + (orbitRadius * Math.cos(velocity));\r\n}\r\n\r\n/*\r\ncalculate the Y value\r\n    degrees = number around the circle\r\n    sunY = the sun's current Y value\r\n    orbitRadius = the radius the planet will travel around\r\n*/\r\nfunction calculateYPosition(degrees, sunY, orbitRadius) {\r\n    var velocity = degrees * (Math.PI /180);\r\n    return sunY + (orbitRadius * Math.sin(velocity));\r\n}\r\n\r\n//run the movePlanets function every 500 milliseconds\r\nsetInterval(movePlanets, 500);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}